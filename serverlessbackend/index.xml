<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Serverless Backend on Wild Rydes Web Application</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/</link><description>Recent content in Serverless Backend on Wild Rydes Web Application</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.</copyright><lastBuildDate>Mon, 09 Sep 2019 17:41:51 +0100</lastBuildDate><atom:link href="https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/overview/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/overview/</guid><description>In this module you&amp;rsquo;ll use AWS Lambda and Amazon DynamoDB to build a backend process for handling requests from your web application. The browser application that you deployed in the first module allows users to request that a unicorn be sent to a location of their choice. In order to fulfill those requests, the JavaScript running in the browser invokes a service running in the cloud.
You&amp;rsquo;ll implement a Lambda function that will be invoked each time a user requests a unicorn.</description></item><item><title>DynamoDB</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/dynamodb/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/dynamodb/</guid><description>1. Create an Amazon DynamoDB Table Use the Amazon DynamoDB Console to create a new DynamoDB table. Call your table Rides and give it a partition key called RideId with type String. The table name and partition key are case sensitive. Make sure you use the exact IDs provided. Use the defaults for all other settings.
After you&amp;rsquo;ve created the table, record the ARN for use in the next step.</description></item><item><title>IAM</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/iam/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/iam/</guid><description>2. Create an IAM Role for Your Lambda Function Background Every Lambda function has an IAM role associated with it. This role defines what other AWS services the function is allowed to interact with. In this workshop, you create an IAM role that grants your Lambda function permission to write logs to Amazon CloudWatch Logs and access to write items to your DynamoDB table.
High-Level Instructions Use the IAM console to create a new role.</description></item><item><title>Recap</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/recap/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/recap/</guid><description>‚≠ê Recap üîë AWS Lambda is a serverless Functions-as-a-Service (FaaS) product that removes the burden of managing servers to run your applications. You configure a trigger and set the role that the function can use and then can interface with almost anything you want from databases, to datastores, to other services either publicly on the internet or in your own Amazon Virtual Private Cloud (VPC). Amazon DynamoDB is a non-relational serverless database that can scale automatically to handle massive amounts of traffic and data without the need to manage any servers.</description></item></channel></rss>