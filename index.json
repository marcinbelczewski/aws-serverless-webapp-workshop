[{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/","title":"Wild Rydes","tags":[],"description":"","content":"In this workshop you\u0026rsquo;ll deploy a simple web application that enables users to request unicorn rides from the Wild Rydes fleet. The application will present users with an HTML based user interface for indicating the location where they would like to be picked up and will interface on the backend with a RESTful web service to submit the request and dispatch a nearby unicorn. The application will also provide facilities for users to register with the service and log in before requesting rides.\nThe application architecture uses AWS Lambda, Amazon API Gateway, Amazon S3, Amazon DynamoDB, Amazon Cognito, and AWS Amplify Console. Amplify Console hosts static web resources including HTML, CSS, JavaScript, and image files which are loaded in the user\u0026rsquo;s browser via S3. JavaScript executed in the browser sends and receives data from a public backend API built using Lambda and API Gateway. Amazon Cognito provides user management and authentication functions to secure the backend API. Finally, DynamoDB provides a persistence layer where data can be stored by the API\u0026rsquo;s Lambda function.\nSee the diagram below for a depiction of the complete architecture.\nModules This workshop is divided into four modules. Each module describes a scenario of what we\u0026rsquo;re going to build and step-by-step directions to help you implement the architecture and verify your work.\n   Module Description     Static Web Hosting Deploy the static website using AWS Amplify Console by first creating a git repository (in either CodeCommit or GitHub) and then pushing the site code.   User Management Configure user management for the website using Amazon Cognito.   Serverless Backend Create an AWS Lambda function that will persist data to an Amazon DynamoDB table.   RESTful APIs Expose the Lambda function via an Amazon API Gateway as a RESTful API that the static site can call.    ⚠️ These modules are intended to be executed in order.\nAfter you have completed the workshop you can delete all of the resources that were created by following the cleanup guide.\nNext ✅ Review and follow the directions in the setup guide, wherein you\u0026rsquo;ll configure your AWS Cloud9 IDE and setup pre-requisites like an AWS Account.\n"},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/overview/","title":"Overview","tags":[],"description":"","content":"In this module you use API Gateway to expose the Lambda function you built in the previous module as a RESTful API. This API will be accessible on the public Internet. It will be secured using the Amazon Cognito user pool you created in the User Management module. Using this configuration you will then turn your statically hosted website into a dynamic web application by adding client-side JavaScript that makes AJAX calls to the exposed APIs.\nThe preceding diagram shows how API Gateway integrates with the existing components you built previously.\nThe static website you deployed in the first module already has a page configured to interact with the API you\u0026rsquo;ll build in this module. The ride route has a simple map-based interface for requesting a unicorn ride. After authenticating using the /signin route, your users select their pickup location by clicking a point on the map and request a ride by choosing the Request Unicorn button in the upper right corner.\nThis module focuses on the steps required to build the cloud components of the API, but if you\u0026rsquo;re interested in how the browser code works that calls this API, you can inspect the ride.js source. In this case the application uses jQuery\u0026rsquo;s ajax() method to make the remote request.\nImplementation Instructions ❗ Ensure you\u0026rsquo;ve completed the Serverless Backend step before beginning the workshop.\nEach of the following sections provides an implementation overview and detailed, step-by-step instructions. The overview should provide enough context for you to complete the implementation if you\u0026rsquo;re already familiar with the AWS Management Console or if you want to explore the services yourself without following a walkthrough.\n"},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/overview/","title":"Overview","tags":[],"description":"","content":"In this module you\u0026rsquo;ll use AWS Lambda and Amazon DynamoDB to build a backend process for handling requests from your web application. The browser application that you deployed in the first module allows users to request that a unicorn be sent to a location of their choice. In order to fulfill those requests, the JavaScript running in the browser invokes a service running in the cloud.\nYou\u0026rsquo;ll implement a Lambda function that will be invoked each time a user requests a unicorn. The function selects a unicorn from the fleet, records the request in a DynamoDB table, and responds to the front-end application with details about the dispatched unicorn.\nThe function is invoked from the browser using Amazon API Gateway. You implement that connection in the next module. For this module, you test your function in isolation.\nImplementation Instructions ❗ Ensure you\u0026rsquo;ve completed the User Management step before beginning this module.\nEach of the following sections provides an implementation overview and detailed, step-by-step instructions. The overview should provide enough context for you to complete the implementation if you\u0026rsquo;re already familiar with the AWS Management Console or if you want to explore the services yourself without following a walkthrough.\n"},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/overview/","title":"Overview","tags":[],"description":"","content":"In this module you\u0026rsquo;ll configure AWS Amplify Console to host the static resources for your web application. In subsequent modules you\u0026rsquo;ll add dynamic functionality to these pages using JavaScript to call remote RESTful APIs built with AWS Lambda and Amazon API Gateway.\nArchitecture Overview The architecture for this module is very straightforward. All of your static web content including HTML, CSS, JavaScript, images and other files will be managed by AWS Amplify Console and served via Amazon CloudFront. Your end users will then access your site using the public website URL exposed by AWS Amplify Console. You don\u0026rsquo;t need to run any web servers or use other services in order to make your site available.\nImplementation Instructions ❗ Ensure you\u0026rsquo;ve completed the setup guide before beginning the workshop.\nEach of the following sections provides an implementation overview and detailed, step-by-step instructions. The overview should provide enough context for you to complete the implementation if you\u0026rsquo;re already familiar with the AWS Management Console or you want to explore the services yourself without following a walkthrough.\n"},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/overview/","title":"Overview","tags":[],"description":"","content":"In this module you\u0026rsquo;ll use the AWS Amplify CLI to create an Amazon Cognito User Pool to manage your users' accounts. You\u0026rsquo;ll deploy pages that enable customers to register as a new user, verify their email address, and sign into the site.\nArchitecture Overview When users visit your website they will first register a new user account. For the purposes of this workshop we\u0026rsquo;ll only require them to provide an email address and password to register. However, you can configure Amazon Cognito to require additional attributes in your own applications.\nAfter users submit their registration, Amazon Cognito will send a confirmation email with a verification code to the address they provided. To confirm their account, users will return to your site and enter their email address and the verification code they received. You can also confirm user accounts using the Amazon Cognito console if you want to use fake email addresses for testing.\nAfter users have a confirmed account (either using the email verification process or a manual confirmation through the console), they will be able to sign in. When users sign in, they enter their username (or email) and password. A JavaScript function then communicates with Amazon Cognito, authenticates using the Secure Remote Password protocol (SRP), and receives back a set of JSON Web Tokens (JWT). The JWTs contain claims about the identity of the user and will be used in the next module to authenticate against the RESTful API you build with Amazon API Gateway.\nImplementation Instructions ❗ Ensure you\u0026rsquo;ve completed the Static Web Hosting step before beginning the workshop.\nEach of the following sections provides an implementation overview and detailed, step-by-step instructions. The overview should provide enough context for you to complete the implementation if you\u0026rsquo;re already familiar with the AWS Management Console or you want to explore the services yourself without following a walkthrough.\n"},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/setup/","title":"Setup","tags":[],"description":"","content":""},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/overview/","title":"Overview","tags":[],"description":"","content":"This page provides instructions for cleaning up the resources created during the preceding modules.\n"},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/setup/accountsetup/","title":"Account Setup","tags":[],"description":"","content":"Region selection Use a single region - US East (N. Virginia), also known as us-east-1, for the duration of this workshop. Please select US East (N. Virginia) in the top right corner.\nStarting AWS Cloud9 IDE AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. Cloud9 comes pre-packaged with essential tools for popular programming languages and the AWS Command Line Interface (CLI) pre-installed so you don’t need to install files or configure your laptop for this workshop.\nYour Cloud9 environment will have access to the same AWS resources as the user with which you logged into the AWS Management Console. We strongly recommend using Cloud9 to complete this workshop.\n✅ Step-by-step Instructions\n From the AWS Management Console, Select Services then select Cloud9 under Developer Tools.   Select Create environment.\n  Enter %INITIALS%-wildrydes-webapp-development into Name and optionally provide a Description. ⚠️ %INITIALS%- means prefixing resource name with participant\u0026rsquo;s initials to avoid resources names clashes with other workshop participants. For example in the picture below participant Jan Nowak, with jn initials, creates the Cloud9 environment named jn-wildrydes-webapp-development.\n   Select Next step.\n  In Environment settings:\n   Set the Instance type to t2.micro (1 GiB RAM + 1 vCPU). Choose training | vpc-0f41a5893958f5b6e as Network (VPC) Choose training-public-a or training-public-b as Subnet   Select Next step.\n  Review the environment settings and select Create environment. It will take a couple of minutes for your Cloud9 environment to be provisioned and prepared.\n  Setting up Cloud9 IDE  Once ready, your IDE will open to a welcome screen. Below that, you should see a terminal prompt. Close the Welcome tab and drag up the terminal window to give yourself more space to work in.   You can run AWS CLI commands in here just like you would on your local computer. Remember for this workshop to run all commands within the Cloud9 terminal window rather than on your local computer. Keep your AWS Cloud9 IDE opened in a browser tab throughout this workshop.  Verify that your user is logged in by running the command aws sts get-caller-identity. Copy and paste the command into the Cloud9 terminal window.  aws sts get-caller-identity  You\u0026rsquo;ll see output indicating your account and user information:  { \u0026#34;Account\u0026#34;: \u0026#34;123456789012\u0026#34;, \u0026#34;UserId\u0026#34;: \u0026#34;AKIAIOSFODNN7EXAMPLE\u0026#34;, \u0026#34;Arn\u0026#34;: \u0026#34;arn:aws:iam::123456789012:user/Alice\u0026#34; } ⭐ Tips 💡 Keep an open scratch pad in Cloud9 or a text editor on your local computer for notes. When the step-by-step directions tell you to note something such as an ID or Amazon Resource Name (ARN), copy and paste that into your scratch pad.\n⭐ Recap 🔑 Use the same region for the entirety of this workshop.\n🔑 Keep your AWS Cloud9 IDE opened in a browser tab\nNext steps ✅ Now that you have launched and initialized Cloud9, wait for the workshop instructor to continue. If you are completing the workshop on your own, proceed to the recap.\n"},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/amplifycli/","title":"Amplify Cli","tags":[],"description":"","content":"1. Initialize AWS Amplify CLi Background The AWS Amplify Command Line Interface (CLI) is a unified toolchain to create, integrate, and manage the AWS cloud services for your app. The Amplify CLI toolchain is designed to work with the Amplify JavaScript library as well as the AWS Mobile SDKs for iOS and Android.\nAWS Amplify Authentication module provides Authentication APIs and building blocks for developers who want to create user authentication experiences.\n✅ Step-by-step directions\n  Install the Amplify CLI by running the following command from within your Cloud9 terminal window:\nnpm install -g @aws-amplify/cli More information can be found in the documention here\n  Configure your default AWS profile.\necho \u0026#39;[profile default]\u0026#39; \u0026gt; ~/.aws/config   Go to the root wild-rydes directory of the repository:\n  Initialize amplify CLI by executing the following command:\namplify init   The terminal will now take a few moments to initialize your project:\nBe sure to provide the same environment name that you provided earlier, for example, prod.\n Verify that the initialization has finished by entering the following command. Version 4.29.3 or greater should be installed.\namplify version Next you will add an Amazon Cognito category to your AWS Amplify configuration, via the AWS Amplify CLI.\n"},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/dynamodb/","title":"DynamoDB","tags":[],"description":"","content":"1. Create an Amazon DynamoDB Table Use the Amazon DynamoDB Console to create a new DynamoDB table. Call your table Rides and give it a partition key called RideId with type String. The table name and partition key are case sensitive. Make sure you use the exact IDs provided. Use the defaults for all other settings.\nAfter you\u0026rsquo;ve created the table, record the ARN for use in the next step.\n✅ Step-by-step directions\n Go to the Amazon DynamoDB Console Choose Create table. Enter %INITIALS%-Rides for the Table name. This field is case sensitive. ⚠️ Remember about your initials prefix! Enter RideId for the Partition key and select String for the key type. This field is case sensitive. Check the Use default settings box and choose Create.  Scroll to the bottom of the Overview section of your new table and record the ARN. You will use this in the next section.  "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/module4/","title":"Module 4","tags":[],"description":"","content":"3. Module 4 - REST API Cleanup Delete the REST API created in module 4. There is a Delete API option in the Actions drop-down when you select your API in the Amazon API Gateway Console.\n✅ Step-by-step directions\n Go to the Amazon API Gateway Console Select the API you created in module 4. Expand the Actions drop-down and choose Delete API. Enter the name of your API when prompted and choose Delete API.  "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/region/","title":"Region","tags":[],"description":"","content":"1. Region Selection Use a single region - US East (N. Virginia), also known as us-east-1, for the duration of this workshop. Please select US East (N. Virginia) in the top right corner.\nOnce you\u0026rsquo;ve chosen a region, you should deploy all of the resources for this workshop there. Make sure you select your region from the dropdown in the upper right corner of the AWS Console before getting started.\n"},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/restapi/","title":"REST API","tags":[],"description":"","content":"1. Create a New REST API Use the Amazon API Gateway console to create a new API named WildRydes.\n✅ Step-by-step directions\n  Go to the Amazon API Gateway Console\n  On the REST API card, choose Build.\n  In the section Create new API select New API to clear the example API definition.\n  Enter %INITIALS%-WildRydes for the API Name. ⚠️ Remember about your initials prefix!\n  Select Regional from the Endpoint Type dropdown. Edge optimized APIs are best for public services being accessed from the Internet. Regional endpoints are typically used for APIs that are accessed primarily from within the same AWS Region. Private APIs are for internal services inside of an Amazon VPC.\n   Choose Create API\n  "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/","title":"Static Web Hosting","tags":[],"description":"","content":""},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/repository/","title":"Repository","tags":[],"description":"","content":"2. Create the git repository We will use AWS CodeCommit to host your site\u0026rsquo;s repository. CodeCommit is included in the AWS Free Tier.\nCodeCommit helper The AWS Cloud9 development environment comes with AWS managed temporary credentials that are associated with your IAM user. You use these credentials with the AWS git-remote-codecommit tool (A Git Remote Helper that makes it easier to interact with AWS CodeCommit). This tool is installed in Cloud9 by default. You can install it on your own machine by following the installation instructions.\nSetting up your CodeCommit repository  First, create a new CodeCommit repository. ⚠️ Remember to prefix it with your initials!: aws codecommit create-repository \\ --repository-name %INITIALS%-wild-rydes  Clone the existing (not new) workshop repository from GitHub: git clone https://github.com/aws-samples/aws-serverless-webapp-workshop.git  Change into the workshop repository directory: cd aws-serverless-webapp-workshop  Split out the WildRydesVue code into its own branch: sudo yum install git-subtree -y git subtree split -P resources/code/WildRydesVue -b WildRydesVue Note: You may get the error message git: 'subtree' is not a git command on Cloud9 and Amazon Linux 2. Run sudo yum install git-subtree as a workaround, as this is not installed by default with git in these environments.\n Create a new directory for your CodeCommit repo: mkdir ../wild-rydes \u0026amp;\u0026amp; cd ../wild-rydes  Initialize a new git repository: git init  Pull the WildRydesVue branch into your new repo: git pull ../aws-serverless-webapp-workshop WildRydesVue  Add your CodeCommit repository as a remote. ⚠️ Adjust the %INITIALS% prefix in the command below to match your CodeCommit repository prefix: git remote add origin codecommit://%INITIALS%-wild-rydes  Push the code to your new CodeCommit repository: git push -u origin master  Remove the temporary local repository you created in step 2: rm -rf ../aws-serverless-webapp-workshop   "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/","title":"User Management","tags":[],"description":"","content":""},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/cognito/","title":"Cognito","tags":[],"description":"","content":"2. Create a Cognito User Pools Authorizer Background Amazon API Gateway can use the JWT tokens returned by Cognito User Pools to authenticate API calls. In this step you\u0026rsquo;ll configure an authorizer for your API to use the user pool you created in User Management.\nHigh-Level Instructions In the Amazon API Gateway console, create a new Cognito user pool authorizer for your API. Configure it with the details of the user pool that you created in the previous module. You can test the configuration in the console by copying and pasting the auth token presented to you after you log in via the /signin route of your current website.\n✅ Step-by-step directions\n  Under your newly created API, choose Authorizers.\n  Choose Create New Authorizer.\n  Enter WildRydes for the Authorizer name.\n  Select Cognito for the type.\n  In the Region drop-down under Cognito User Pool, select the Region where you created your Cognito user pool in the User Management module (by default the current region should be selected).\n  Enter wildrydes in the Cognito User Pool input, the name will auto-complete and allow you to select the name of the user pool that was generated when the user pool was created. ⚠️ Ensure you have not selected another workshop participant\u0026rsquo;s user pool! If you forgot the name of your Cognito User Pool, refer to User Management for instructions on how to retrieve it.\n  Enter Authorization for the Token Source.\n  Choose Create.\n  Verify your authorizer configuration ✅ Step-by-step directions\n  Open a new browser tab and visit /ride under your website\u0026rsquo;s domain.\n  If you are redirected to the sign-in page, sign in with the user you created in the last module. You will be redirected back to /ride.\n  Copy the auth token from the notification on the /ride,\n  Go back to previous tab where you have just finished creating the Authorizer\n  Click Test at the bottom of the card for the authorizer.\n  Paste the auth token into the Authorization Token field in the popup dialog.   Click Test button and verify that the response code is 200 and that you see the claims for your user displayed.\n  "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/iam/","title":"IAM","tags":[],"description":"","content":"2. Create an IAM Role for Your Lambda Function Background Every Lambda function has an IAM role associated with it. This role defines what other AWS services the function is allowed to interact with. In this workshop, you create an IAM role that grants your Lambda function permission to write logs to Amazon CloudWatch Logs and access to write items to your DynamoDB table.\nHigh-Level Instructions Use the IAM console to create a new role. Name it %INITIALS%-WildRydesLambda and select AWS Lambda for the role type. You\u0026rsquo;ll need to attach policies that grant your function permissions to write to Amazon CloudWatch Logs and put items to your DynamoDB table.\nAttach the managed policy called AWSLambdaBasicExecutionRole to this role to grant the necessary CloudWatch Logs permissions. Also, create a custom inline policy for your role that allows the dynamodb:PutItem action for the table you created in the previous section.\n✅ Step-by-step directions\n Go to the AWS IAM Console Select Roles in the left navigation bar and then choose Create role. Select Lambda for the role type from the AWS service group, then click Next: Permissions Selecting a role type automatically creates a trust policy for your role that allows AWS services to assume this role on your behalf. If you were creating this role using the CLI, AWS CloudFormation or another mechanism, you would specify a trust policy directly.\n  Begin typing AWSLambdaBasicExecutionRole in the Filter text box and check the box next to that role. Click Next: Tags. Add any tags that you wish. Click Next: Review. Enter %INITIALS%-WildRydesLambda for the Role name. ⚠️ Remember about your initials prefix! Choose Create role.  Next you need to add permissions to the role so that it can access your DynamoDB table.\n*✅ Step-by-step directions\n While in the IAM Console on the roles page type %INITIALS%-WildRydesLambda into the filter box on the Roles page and choose the role you just created. On the Permissions tab, choose the Add inline policy link in the upper right corner to create a new inline policy.  Select Choose a service. Begin typing DynamoDB into the search box labeled Find a service and select DynamoDB when it appears.  Choose Select actions. Begin typing PutItem into the search box labeled Filter actions and check the box next to PutItem when it appears. Select the Resources section. With the Specific option selected, choose the Add ARN link in the table section. Paste the ARN of the table you created in the previous section in the Specify ARN for table field, and choose Add. Choose Review Policy. Enter DynamoDBWriteAccess for the policy name and choose Create policy.   "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/module3/","title":"Module 3","tags":[],"description":"","content":"2. Module 3 - Serverless Backend Cleanup Delete the AWS Lambda function, IAM role and Amazon DynamoDB table you created in module 3.\n✅ Step-by-step directions\nLambda Function  Go to the AWS Lambda console Select the %INITIALS%-RequestUnicorn function you created in module 3. From the Actions drop-down, choose Delete function. Choose Delete when prompted to confirm.  IAM Role  Go to the AWS IAM Console Select Roles from the navigation menu. Type %INITIALS%-WildRydesLambda into the filter box. Select the role you created in module 3. From the Role actions drop-down, select Delete role. Choose Yes, Delete when prompted to confirm.  DynamoDB Table  Go to the Amazon DynamoDB Console Choose Tables in the navigation menu. Choose the %INITIALS%-Rides table you created in module 3. Choose Delete table from the Actions drop-down. Leave the checkbox to Delete all CloudWatch alarms for this table selected and choose Delete.  "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/userpool/","title":"User Pool","tags":[],"description":"","content":"2. Create an Amazon Cognito User Pool using AWS Amplify CLI Background The AWS Amplify Authentication module provides Authentication APIs and building blocks for developers who want to create user authentication experiences.\nAmazon Cognito User Pools is a full-featured user directory service to handle user registration, authentication, and account recovery. Amazon Cognito Federated Identities on the other hand, is a way to authorize your users to use AWS services.\nAmplify interfaces with User Pools to store your user information. This includes federation with other OpenID providers like Facebook \u0026amp; Google. Amplify also uses Federated Identities to manage user access to AWS Resources, like allowing a user to upload a file to an S3 bucket. The Amplify CLI automates the access control policies for these AWS resources and provides fine grained access controls via GraphQL for protecting data in your APIs.\nIn this section you use the Amplify CLI to create a new Cognito User Pool with the default settings. Then you use the Amazon Cognito Console to manage the new User Pool.\nAmazon Cognito ✅ Step-by-step directions\n Execute the following commands to add the Amazon Cognito User Pool:  amplify add auth The AWS Amplify CLI will now run through the set up for Amazon Cognito, select the following:\n\u0026gt; Do you want to use the default authentication and security configuration? \u0026quot;Default configuration\u0026quot; \u0026gt; How do you want users to be able to sign in? \u0026quot;Username\u0026quot; \u0026gt; Do you want to configure advanced settings? \u0026quot;No, I am done.\u0026quot; Once configuration completes you see the following confirmation: Do not run amplify push or amplify publish - this will create duplicate backend resources. Amplify Console creates the necessary resources when you push your code to your repository.\n Committing your code updates to provision your Amplify backend resources in the cloud and kick off a new build.\n Commit the changes to your git repository:  git add . git commit -m \u0026quot;Configure Cognito\u0026quot; git push Amplify Console picks up the changes and begins building and deploying your web application.\n"},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/resource/","title":"API Resource","tags":[],"description":"","content":"3. Create a new resource and method Create a new resource called /ride within your API. Then create a POST method for that resource and configure it to use a Lambda proxy integration backed by the RequestUnicorn function you created in the first step of this module.\n✅ Step-by-step directions\n  In the left nav, click on Resources under your WildRydes API.\n  From the Actions dropdown select Create Resource.\n  Enter ride as the Resource Name.\n  Ensure the Resource Path is set to ride.\n  Select Enable API Gateway CORS for the resource.\n  Choose Create Resource.\n  With the newly created /ride resource selected, from the Action dropdown select Create Method.\n  Select POST from the new dropdown that appears, then click the checkmark.\n  Select Lambda Function for the integration type.\n  Check the box for Use Lambda Proxy integration.\n  Select the Region you are using for Lambda Region.\n  Enter the name of the function you created in the previous module, %INITIALS%-RequestUnicorn, for Lambda Function. ⚠️ Remember about your initials as prefix!. In the picture below function name\u0026rsquo;s prefix is for sample user Jan Nowak with jn as initials.\n  Choose Save. Please note, if you get an error that you function does not exist, check that the region you selected matches the one you used in the previous module.\n  When prompted to give Amazon API Gateway permission to invoke your function, choose OK.\n  Select the Method Request card.\n  Choose the pencil icon next to Authorization.\n  Select the WildRydes Cognito user pool authorizer from the drop-down list, and click the checkmark icon.\n  "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/appclient/","title":"App Client","tags":[],"description":"","content":"3.1 Learn Your User Pool\u0026rsquo;s Name A new Cognito User Pool was created for you in previous step. You need to learn the name of newly created user pool, to distinguish it from user pools of other workshop participants. To learn the name, do the following:\n✅ Step-by-step directions\n  In Cloud9 repository, locate wild-rydes/amplify/backend/auth folder.\n  Locate subfolder prefixed with wildrydes and parameters.json file inside.\n  In parameters.json file locate userPoolName property. Cognito User Pool name will consist of the value of userPoolName property suffixed with environment name. For example in picture below, userPoolName is wildrydes6f227ebc_userpool_6f227ebc, hence the Cognito User Pool name is wildrydes6f227ebc_userpool_6f227ebc-prod\n  3.2 Check Your User Pool\u0026rsquo;s App Client A new App client has been created by the AWS Amplify build. Let\u0026rsquo;s take a look at this app client.\n✅ Step-by-step directions\n  Go to the Amazon Cognito Console\n  Choose Manage User Pools.\nUsing the name you learned in step 3.1, find your new user pool generated by the AWS Amplify CLI that looks something similar to the example below:   Click the new user pool to open the Pool Details page\n  From the Pool Details page, select App clients from the General settings section in the left navigation bar.\n  You will see that a new App client has been generated. Your web application is configured to use this App client via a config file located in wild-rydes/src/aws-exports.js.\n  How it Works: Rather than configuring each service through a constructor or constants file, Amplify supports configuration through a centralized file called aws-exports.js which defines all the regions and service endpoints to communicate. Whenever you run amplify push or rebuild your web application by running a git commit, this file is automatically created, allowing you to focus on your application code. The Amplify CLI places this file in the appropriate source directory configured with amplify init.\n❗ You won\u0026rsquo;t see updates to this file in your local file store because it is included in the .gitignore file.\n"},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/deploy/","title":"Deploy","tags":[],"description":"","content":"3. Deploy the site with the AWS Amplify Console Next you\u0026rsquo;ll use the AWS Amplify Console to deploy the website you\u0026rsquo;ve just commited to git. The Amplify Console takes care of the work of setting up a place to store your static web application code and provides a number of helpful capabilities to simplify both the lifecycle of that application as well as enable best practices.\n✅ Step-by-step directions\n Launch the Amplify Console Underneath Get Started, you\u0026rsquo;ll find a section titled **Host your web app\u0026quot;. Click the Get started button within that section. Depending on your console and account settings, you may not see the Get Started prompt. In this case, click on the AWS Amplify title link in the top of the left side navigation.\n  Select AWS CodeCommit and choose Continue From the dropdown select the Repository and Master Branch created today and select Next Amplify will detect that the application has an existing Amplify backend. Select Create New Environment and name it prod (all lowercase).  Now you need to create a new service role with the permissions to deploy the application backend.\n  Click on Create new role, check that Amplify is selected and click Next permissions, click Next: Tags, click Next: Review.\n  Give the Role a new name: %INITIALS%-wildrydes-backend-role with your initials as prefix, and click Create role. Close this tab and return to the AWS Amplify Build configure console.\n  Refresh the role list by clicking on the circular arrow button, and select the role created in the step above.\n  ⚠️ In the picture below prefixes are for sample user Jan Nowak with jn as initials.\n  Select Next\n  On the Review page select Save and deploy\nThis initial build and deploy process may take up to five minutes for Amplify Console to create the neccesary resources and to deploy your code.\n  Once completed, click the site image to launch your Wild Rydes site.\nIf you follow the link for Master you\u0026rsquo;ll see various pieces of information about your website deployment, including sample renderings on various platforms:\n "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/lambda/","title":"Lambda","tags":[],"description":"","content":"3. Create a Lambda Function for Handling Requests Background AWS Lambda runs your code in response to events such as an HTTP request. In this step you build a function that processes API requests from the web application to dispatch a unicorn. In the next module you use Amazon API Gateway to create a RESTful API that exposes an HTTP endpoint that can be invoked from your users' browsers. Then you connect the Lambda function you create in this step to that API to create a fully functional backend for your web application.\nHigh-Level Instructions Use the AWS Lambda console to create a new Lambda function called %INITIALS%-RequestUnicorn that processes API requests. Copy and paste this example implementation into the AWS Lambda console\u0026rsquo;s editor for your function code.\nConfigure your function to use the %INITIALS%-WildRydesLambda IAM role you created in the previous section.\n✅ Step-by-step directions\n  Go to the AWS Lambda console\n  Click Create function.\n  Keep the default Author from scratch card selected.\n  Enter %INITIALS%-RequestUnicorn in the Name field. ⚠️ Remember about your initials prefix!\n  Select Node.js 12.x for the Runtime.\n  Expand Change default execution role under Permissions.\n  Ensure Use an existing role is selected from the Role dropdown.\n  Select %INITIALS%-WildRydesLambda from the Existing Role dropdown.   Choose Create function.\n  Scroll down to the Function code section and replace the existing code in the index.js code editor with the contents of requestUnicorn.js.   ⚠️ Update the code to connect to a prefixed DynamoDB table rather than default non-prefixed!. In the picture below prefix is for sample user Jan Nowak with jn as initials.   Click Deploy button above the code editor.\n  Implementation Validation For this module you will test the function that you built using the AWS Lambda console. In the next module you will add a REST API with API Gateway so you can invoke your function from the browser-based application that you deployed in the first module.\n✅ Step-by-step directions\n From the main edit screen for your function, select Configure test events from the the Select a test event\u0026hellip; dropdown.  Keep Create new test event selected. Enter TestRequestEvent in the Event name field Copy and paste the following test event into the editor: { \u0026#34;path\u0026#34;: \u0026#34;/ride\u0026#34;, \u0026#34;httpMethod\u0026#34;: \u0026#34;POST\u0026#34;, \u0026#34;headers\u0026#34;: { \u0026#34;Accept\u0026#34;: \u0026#34;*/*\u0026#34;, \u0026#34;Authorization\u0026#34;: \u0026#34;eyJraWQiOiJLTzRVMWZs\u0026#34;, \u0026#34;content-type\u0026#34;: \u0026#34;application/json; charset=UTF-8\u0026#34; }, \u0026#34;queryStringParameters\u0026#34;: null, \u0026#34;pathParameters\u0026#34;: null, \u0026#34;requestContext\u0026#34;: { \u0026#34;authorizer\u0026#34;: { \u0026#34;claims\u0026#34;: { \u0026#34;cognito:username\u0026#34;: \u0026#34;the_username\u0026#34; } } }, \u0026#34;body\u0026#34;: \u0026#34;{\\\u0026#34;PickupLocation\\\u0026#34;:{\\\u0026#34;Latitude\\\u0026#34;:47.6174755835663,\\\u0026#34;Longitude\\\u0026#34;:-122.28837066650185}}\u0026#34; }  Choose Create. On the main function edit screen click Test with TestRequestEvent selected in the dropdown. Scroll to the top of the page and expand the Details section of the Execution result section. Verify that the execution succeeded and that the function result looks like the following: { \u0026#34;statusCode\u0026#34;: 201, \u0026#34;body\u0026#34;: \u0026#34;{\\\u0026#34;RideId\\\u0026#34;:\\\u0026#34;1h0zDZ-6KLZaEQCPyqTxeQ\\\u0026#34;,\\\u0026#34;Unicorn\\\u0026#34;:{\\\u0026#34;Name\\\u0026#34;:\\\u0026#34;Shadowfax\\\u0026#34;,\\\u0026#34;Color\\\u0026#34;:\\\u0026#34;White\\\u0026#34;,\\\u0026#34;Gender\\\u0026#34;:\\\u0026#34;Male\\\u0026#34;},\\\u0026#34;UnicornName\\\u0026#34;:\\\u0026#34;Shadowfax\\\u0026#34;,\\\u0026#34;Eta\\\u0026#34;:\\\u0026#34;30 seconds\\\u0026#34;,\\\u0026#34;Rider\\\u0026#34;:\\\u0026#34;the_username\\\u0026#34;}\u0026#34;, \u0026#34;headers\u0026#34;: { \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34; } }   "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/module2/","title":"Module 2","tags":[],"description":"","content":"3. Module 2 - User Management Cleanup Delete the Amazon Cognito User Pool\n✅ Step-by-step directions\n Go to the Amazon Cognito Console Choose Manage your User Pools. Select the user pool you created in module 2. ⚠️ Ensure you have not selected another workshop participant\u0026rsquo;s user pool! If you forgot the name of your Cognito User Pool, refer to User Management for instructions on how to retrieve it. Choose Delete Pool in the upper right corner of the page. Complete the application deletion process.  "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/","title":"Serverless Backend","tags":[],"description":"","content":""},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/createuser/","title":"Create a User","tags":[],"description":"","content":"4. Create a new user for your user pool Note: Instead of having you write the browser-side code for managing the registration, verification, and sign in flows, we provide a working implementation in the assets you deployed in the first module by using the AWS Amplify Authentication UI component.\nThe Authenticator component provides basic login/logout functionality for an application, as well as confirmation steps for new user registration and user login.\nUsage: \u0026lt;amplify-authenticator\u0026gt;\u0026lt;/amplify-authenticator\u0026gt;\nImplementation Validation ✅ Step-by-step directions\n  Visit /auth under your website domain, or choose the Giddy Up! button on the homepage of your site.\n  Click on the Create Account link at the bottom of the sign in box.\n  Complete the registration form and choose Create Account. You can use your own email or enter a fake email. Make sure to choose a password that contains at least one upper-case letter, a number, and a special character. Don\u0026rsquo;t forget the password you entered for later. You should see an alert that confirms that your user has been created.\n  ⚠️ If you get an Authentication Error  this is likely because your changes have not finished deploying.\n  Confirm your new user using one of the two following methods.\n  If you used an email address you control, you can complete the account verification process by entering the verification code that is emailed to you. Please note, the verification email may end up in your spam folder. For real deployments we recommend configuring your user pool to use Amazon Simple Email Service to send emails from a domain you own.\n  If you used a dummy email address, you must confirm the user manually through the Cognito console.\n From the AWS console, click Services then select Cognito under Security, Identity \u0026amp; Compliance. Choose Manage your User Pools Select the user pool prefixed with wildrydes and click Users and groups in the left navigation bar. You should see a user corresponding to the email address that you submitted through the registration page. Choose that username to view the user detail page. Choose Confirm user to finalize the account creation process.    After confirming the new user using either the verrification code or the Cognito console, click on the back to sign in link or refresh the /auth page and log in using the email address and password you entered during the registration step.\n  If successful you should be redirected to /ride. You should see a notification that the API is not configured.\n  "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/deploy/","title":"Deploy","tags":[],"description":"","content":"4. Deploy Your API From the Amazon API Gateway console, choose Actions, Deploy API. You\u0026rsquo;ll be prompted to create a new stage. You can use prod for the stage name.\n✅ Step-by-step directions\n In the Actions drop-down list select Deploy API. Select [New Stage] in the Deployment stage drop-down list. Enter prod for the Stage Name. Choose Deploy. Record the Invoke URL. You will use it in the next section.  "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/modify/","title":"Modify","tags":[],"description":"","content":"4. Modify the website The AWS Amplify Console will rebuild and redeploy the app when it detects changes to the connected repository. Make a change to the main page to test out this process.\n✅ Step-by-step directions\n  From your Cloud9 environment open the index.html file in the /wild-rydes/public/ directory of the repository.\n  Modify the title line:\n \u0026lt;title\u0026gt;wildrydes\u0026lt;/title\u0026gt; So that it says:\n \u0026lt;title\u0026gt;Wild Rydes - Rydes of the Future!\u0026lt;/title\u0026gt; Save the file\n  Commit again to your git repository the changes:\ngit add . git commit -m \u0026quot;updated title\u0026quot; git push Amplify Console will begin to build the site again soon after it notices the update to the repository. This happens pretty quickly! Head back to the Amplify Console to watch the process.\n  Once completed, re-open the Wild Rydes site and notice the title change.\n  "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/module1/","title":"Module 1","tags":[],"description":"","content":"4. Module 1 - Web Application Cleanup Delete the AWS Amplify Console application and optionally the AWS CodeCommit or GitHub repository created:\n✅ Step-by-step directions\nFor the Amplify Console web applcation:  Launch the Amplify Console console page. Select the application you launched today. From Actions in the top right corner, select Delete App Complete the application deletion process.  For the CodeCommit repository:  Open the AWS CodeCommit console Select the radio button next to the repository created today. Select Delete repository from the upper right of the page. Complete the repository deletion process.  "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/","title":"RESTful APIs","tags":[],"description":"","content":""},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/cloudwatchlogs/","title":"CloudWatch Logs","tags":[],"description":"","content":"5. CloudWatch Logs Cleanup AWS Lambda automatically creates a new log group per function in Amazon CloudWatch Logs and writes logs to it when your function is invoked. You should delete the log group for the RequestUnicorn function.\n✅ Step-by-step directions\n From the AWS Console click Services then select CloudWatch under Management Tools. Choose Log Groups underneath Logs in the navigation menu. Select the /aws/lambda/%INITIALS%-RequestUnicorn log group. If you have many log groups in your account, you can type /aws/lambda/%INITIALS%-RequestUnicorn into the Filter text box, to easily locate the log group. ⚠️ Remember to replace %INITIALS% with your actual initials. Choose Delete log group from the Actions drop-down. Choose Yes, Delete when prompted to confirm. If you launched any CloudFormation templates to complete a module, repeat steps 3-5 for any log groups which begin with /aws/lambda/wildrydes-webapp.  "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/updateconfig/","title":"Update Config","tags":[],"description":"","content":"5. Update the Website Config Update the /src/config.js file in your website deployment to include the invoke URL of the stage you just created. You should copy the invoke URL directly from the top of the stage editor page on the Amazon API Gateway console and paste it into the _config.api.invokeUrl key of your site\u0026rsquo;s /src/config.js file. Make sure when you update the config file it still contains the updates you made in the previous module for your Cognito user pool.\n✅ Step-by-step directions\n On your Cloud9 development environment open src/config.js Update the invokeUrl setting under the api key in the config.js file. Set the value to the Invoke URL for the deployment stage your created in the previous section.  An example of a complete config.js file is included below.\n⚠️ Note: The actual URL in your file will be different.\nmodule.exports = { api: { invokeUrl: \u0026#39;https://rfk14x9w40.execute-api.us-east-1.amazonaws.com/prod\u0026#39; } }  Save the modified file making sure the filename is still config.js. Commit the changes to your git repository: git add src/config.js git commit -m \u0026#34;Configure API invokeURL\u0026#34; git push   Amplify Console should pick up the changes and begin building and deploying your web application. Watch it to verify the completion of the deployment.\nImplementation Validation ✅ Step-by-step directions\n Visit /ride under your website domain. If you are redirected to the sign in page, sign in with the user you created in the previous module. After the map has loaded, click anywhere on the map to set a pickup location. Choose Request Unicorn. You should see a notification in the right sidebar that a unicorn is on its way and then see a unicorn icon fly to your pickup location.  "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/cloud9/","title":"Cloud9","tags":[],"description":"","content":"6. Cloud9 Cleanup Delete the Cloud9 Development environment created today.\n✅ Step-by-step directions\n Launch the Cloud9 console page. Select the environment you launched today. From the top navigation, select Delete Complete the application deletion process.  "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/","title":"Cleanup","tags":[],"description":"","content":""},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/recap/","title":"Recap","tags":[],"description":"","content":"⭐ Recap 🔑 Amazon API Gateway is a fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale. You can easily plug in Authorization via Amazon Cognito and backends such as AWS Lambda to create completely serverless APIs.\n🔧 In this module you\u0026rsquo;ve used API Gateway to provide a REST API to the Lambda function created in the previous module. From there you\u0026rsquo;ve updated the website to use the API endpoint so that you can request rides and the information about the ride is saved in the DynamoDB table created earlier.\n⭐ Congratulations, you have completed the Wild Rydes Web Application Workshop! Check out our other workshops covering additional serverless use cases.\nNext ✅ See this workshop\u0026rsquo;s cleanup guide for instructions on how to delete the resources you\u0026rsquo;ve created.\n"},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/recap/","title":"Recap","tags":[],"description":"","content":"⭐ Recap 🔑 AWS Lambda is a serverless Functions-as-a-Service (FaaS) product that removes the burden of managing servers to run your applications. You configure a trigger and set the role that the function can use and then can interface with almost anything you want from databases, to datastores, to other services either publicly on the internet or in your own Amazon Virtual Private Cloud (VPC). Amazon DynamoDB is a non-relational serverless database that can scale automatically to handle massive amounts of traffic and data without the need to manage any servers.\n🔧 In this module you created a DynamoDB table and a Lambda function to write data into it. In the next module, you create an Amazon API Gateway REST API and connect it to your application to capture ride details from your users.\nNext ✅ After testing your new function using the Lambda console, you can move on to the next module, RESTful APIs.\n"},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/setup/recap/","title":"Recap","tags":[],"description":"","content":"⭐ Recap 🔑 Keep your AWS Cloud9 IDE opened in a tab\nNext ✅ Proceed to the first module, Static Web Hosting, wherein you\u0026rsquo;ll deploy a static web site via AWS Amplify Console.\n"},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/recap/","title":"Recap","tags":[],"description":"","content":"⭐ Recap 🔑 AWS Amplify Console makes it easy to deploy static websites with continuous integration and continuous delivery. It is capable of building more complicated JavaScript framework-based applications and shows you a preview of your application as it renders on popular mobile platforms.\n🔧 In this module, you\u0026rsquo;ve created a static website which will be the base for our Wild Rydes business.\nNext ✅ Proceed to the next module, User Management, where you\u0026rsquo;ll configure Amazon Cognito User Pool with the AWS Amplify CLI to manage our application\u0026rsquo;s users.\n"},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/recap/","title":"Recap","tags":[],"description":"","content":"⭐ Recap 🔑 Amazon Cognito provides two different capabilities for managing users, federated identities and user pools. Amazon Cognito user pools handle almost any aspect about managing users, including login credentials, password resets, multifactor authentication and much more!\n🔧 In this module you used user pools to create a fully-managed user management system that allows you to authenticate your users and manage their user information. You updated your website to use the user pool, and used the AWS SDKs to provide a signin form on the site.\nNext ✅ After you have successfully logged into your web application, you can proceed to the next module, Serverless Backend.\nExtra  Try copying the auth_token you\u0026rsquo;ve received and paste that into an online JWT Decoder to understand what this token means for your application  "},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/tags/","title":"Tags","tags":[],"description":"","content":""}]