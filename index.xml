<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wild Rydes on Wild Rydes Web Application</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/</link><description>Recent content in Wild Rydes on Wild Rydes Web Application</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.</copyright><lastBuildDate>Wed, 13 Jan 2021 15:09:39 +0000</lastBuildDate><atom:link href="https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/overview/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/overview/</guid><description>In this module you use API Gateway to expose the Lambda function you built in the previous module as a RESTful API. This API will be accessible on the public Internet. It will be secured using the Amazon Cognito user pool you created in the User Management module. Using this configuration you will then turn your statically hosted website into a dynamic web application by adding client-side JavaScript that makes AJAX calls to the exposed APIs.</description></item><item><title>Overview</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/overview/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/overview/</guid><description>In this module you&amp;rsquo;ll use AWS Lambda and Amazon DynamoDB to build a backend process for handling requests from your web application. The browser application that you deployed in the first module allows users to request that a unicorn be sent to a location of their choice. In order to fulfill those requests, the JavaScript running in the browser invokes a service running in the cloud.
You&amp;rsquo;ll implement a Lambda function that will be invoked each time a user requests a unicorn.</description></item><item><title>Overview</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/overview/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/overview/</guid><description>In this module you&amp;rsquo;ll configure AWS Amplify Console to host the static resources for your web application. In subsequent modules you&amp;rsquo;ll add dynamic functionality to these pages using JavaScript to call remote RESTful APIs built with AWS Lambda and Amazon API Gateway.
Architecture Overview The architecture for this module is very straightforward. All of your static web content including HTML, CSS, JavaScript, images and other files will be managed by AWS Amplify Console and served via Amazon CloudFront.</description></item><item><title>Overview</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/overview/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/overview/</guid><description>In this module you&amp;rsquo;ll use the AWS Amplify CLI to create an Amazon Cognito User Pool to manage your users' accounts. You&amp;rsquo;ll deploy pages that enable customers to register as a new user, verify their email address, and sign into the site.
Architecture Overview When users visit your website they will first register a new user account. For the purposes of this workshop we&amp;rsquo;ll only require them to provide an email address and password to register.</description></item><item><title>Overview</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/overview/</link><pubDate>Mon, 09 Sep 2019 17:35:12 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/overview/</guid><description>This page provides instructions for cleaning up the resources created during the preceding modules.</description></item><item><title>Account Setup</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/setup/accountsetup/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/setup/accountsetup/</guid><description>Region selection Use a single region - US East (N. Virginia), also known as us-east-1, for the duration of this workshop. Please select US East (N. Virginia) in the top right corner.
Starting AWS Cloud9 IDE AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. Cloud9 comes pre-packaged with essential tools for popular programming languages and the AWS Command Line Interface (CLI) pre-installed so you don’t need to install files or configure your laptop for this workshop.</description></item><item><title>Amplify Cli</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/amplifycli/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/amplifycli/</guid><description>1. Initialize AWS Amplify CLi Background The AWS Amplify Command Line Interface (CLI) is a unified toolchain to create, integrate, and manage the AWS cloud services for your app. The Amplify CLI toolchain is designed to work with the Amplify JavaScript library as well as the AWS Mobile SDKs for iOS and Android.
AWS Amplify Authentication module provides Authentication APIs and building blocks for developers who want to create user authentication experiences.</description></item><item><title>DynamoDB</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/dynamodb/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/dynamodb/</guid><description>1. Create an Amazon DynamoDB Table Use the Amazon DynamoDB Console to create a new DynamoDB table. Call your table Rides and give it a partition key called RideId with type String. The table name and partition key are case sensitive. Make sure you use the exact IDs provided. Use the defaults for all other settings.
After you&amp;rsquo;ve created the table, record the ARN for use in the next step.</description></item><item><title>Module 4</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/module4/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/module4/</guid><description>3. Module 4 - REST API Cleanup Delete the REST API created in module 4. There is a Delete API option in the Actions drop-down when you select your API in the Amazon API Gateway Console.
✅ Step-by-step directions
Go to the Amazon API Gateway Console Select the API you created in module 4. Expand the Actions drop-down and choose Delete API. Enter the name of your API when prompted and choose Delete API.</description></item><item><title>Region</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/region/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/region/</guid><description>1. Region Selection Use a single region - US East (N. Virginia), also known as us-east-1, for the duration of this workshop. Please select US East (N. Virginia) in the top right corner.
Once you&amp;rsquo;ve chosen a region, you should deploy all of the resources for this workshop there. Make sure you select your region from the dropdown in the upper right corner of the AWS Console before getting started.</description></item><item><title>REST API</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/restapi/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/restapi/</guid><description>1. Create a New REST API Use the Amazon API Gateway console to create a new API named WildRydes.
✅ Step-by-step directions
Go to the Amazon API Gateway Console
On the REST API card, choose Build.
In the section Create new API select New API to clear the example API definition.
Enter %INITIALS%-WildRydes for the API Name. ⚠️ Remember about your initials prefix!</description></item><item><title>Repository</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/repository/</link><pubDate>Wed, 13 Jan 2021 15:09:39 +0000</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/repository/</guid><description>2. Create the git repository We will use AWS CodeCommit to host your site&amp;rsquo;s repository. CodeCommit is included in the AWS Free Tier.
CodeCommit helper The AWS Cloud9 development environment comes with AWS managed temporary credentials that are associated with your IAM user. You use these credentials with the AWS git-remote-codecommit tool (A Git Remote Helper that makes it easier to interact with AWS CodeCommit). This tool is installed in Cloud9 by default.</description></item><item><title>Cognito</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/cognito/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/cognito/</guid><description>2. Create a Cognito User Pools Authorizer Background Amazon API Gateway can use the JWT tokens returned by Cognito User Pools to authenticate API calls. In this step you&amp;rsquo;ll configure an authorizer for your API to use the user pool you created in User Management.
High-Level Instructions In the Amazon API Gateway console, create a new Cognito user pool authorizer for your API. Configure it with the details of the user pool that you created in the previous module.</description></item><item><title>IAM</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/iam/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/iam/</guid><description>2. Create an IAM Role for Your Lambda Function Background Every Lambda function has an IAM role associated with it. This role defines what other AWS services the function is allowed to interact with. In this workshop, you create an IAM role that grants your Lambda function permission to write logs to Amazon CloudWatch Logs and access to write items to your DynamoDB table.
High-Level Instructions Use the IAM console to create a new role.</description></item><item><title>Module 3</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/module3/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/module3/</guid><description>2. Module 3 - Serverless Backend Cleanup Delete the AWS Lambda function, IAM role and Amazon DynamoDB table you created in module 3.
✅ Step-by-step directions
Lambda Function Go to the AWS Lambda console Select the %INITIALS%-RequestUnicorn function you created in module 3. From the Actions drop-down, choose Delete function. Choose Delete when prompted to confirm. IAM Role Go to the AWS IAM Console Select Roles from the navigation menu.</description></item><item><title>User Pool</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/userpool/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/userpool/</guid><description>2. Create an Amazon Cognito User Pool using AWS Amplify CLI Background The AWS Amplify Authentication module provides Authentication APIs and building blocks for developers who want to create user authentication experiences.
Amazon Cognito User Pools is a full-featured user directory service to handle user registration, authentication, and account recovery. Amazon Cognito Federated Identities on the other hand, is a way to authorize your users to use AWS services.
Amplify interfaces with User Pools to store your user information.</description></item><item><title>API Resource</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/resource/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/resource/</guid><description>3. Create a new resource and method Create a new resource called /ride within your API. Then create a POST method for that resource and configure it to use a Lambda proxy integration backed by the RequestUnicorn function you created in the first step of this module.
✅ Step-by-step directions
In the left nav, click on Resources under your WildRydes API.
From the Actions dropdown select Create Resource.</description></item><item><title>App Client</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/appclient/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/appclient/</guid><description>3.1 Learn Your User Pool&amp;rsquo;s Name A new Cognito User Pool was created for you in previous step. You need to learn the name of newly created user pool, to distinguish it from user pools of other workshop participants. To learn the name, do the following:
✅ Step-by-step directions
In Cloud9 repository, locate wild-rydes/amplify/backend/auth folder.
Locate subfolder prefixed with wildrydes and parameters.json file inside.
In parameters.</description></item><item><title>Deploy</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/deploy/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/deploy/</guid><description>3. Deploy the site with the AWS Amplify Console Next you&amp;rsquo;ll use the AWS Amplify Console to deploy the website you&amp;rsquo;ve just commited to git. The Amplify Console takes care of the work of setting up a place to store your static web application code and provides a number of helpful capabilities to simplify both the lifecycle of that application as well as enable best practices.
✅ Step-by-step directions
Launch the Amplify Console Underneath Get Started, you&amp;rsquo;ll find a section titled **Host your web app&amp;quot;.</description></item><item><title>Module 2</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/module2/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/module2/</guid><description>3. Module 2 - User Management Cleanup Delete the Amazon Cognito User Pool
✅ Step-by-step directions
Go to the Amazon Cognito Console Choose Manage your User Pools. Select the user pool you created in module 2. ⚠️ Ensure you have not selected another workshop participant&amp;rsquo;s user pool! If you forgot the name of your Cognito User Pool, refer to User Management for instructions on how to retrieve it. Choose Delete Pool in the upper right corner of the page.</description></item><item><title>Create a User</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/createuser/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/createuser/</guid><description>4. Create a new user for your user pool Note: Instead of having you write the browser-side code for managing the registration, verification, and sign in flows, we provide a working implementation in the assets you deployed in the first module by using the AWS Amplify Authentication UI component.
The Authenticator component provides basic login/logout functionality for an application, as well as confirmation steps for new user registration and user login.</description></item><item><title>Deploy</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/deploy/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/deploy/</guid><description>4. Deploy Your API From the Amazon API Gateway console, choose Actions, Deploy API. You&amp;rsquo;ll be prompted to create a new stage. You can use prod for the stage name.
✅ Step-by-step directions
In the Actions drop-down list select Deploy API. Select [New Stage] in the Deployment stage drop-down list. Enter prod for the Stage Name. Choose Deploy. Record the Invoke URL. You will use it in the next section.</description></item><item><title>Modify</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/modify/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/modify/</guid><description>4. Modify the website The AWS Amplify Console will rebuild and redeploy the app when it detects changes to the connected repository. Make a change to the main page to test out this process.
✅ Step-by-step directions
From your Cloud9 environment open the index.html file in the /wild-rydes/public/ directory of the repository.
Modify the title line:
&amp;lt;title&amp;gt;wildrydes&amp;lt;/title&amp;gt; So that it says:
&amp;lt;title&amp;gt;Wild Rydes - Rydes of the Future!</description></item><item><title>Module 1</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/module1/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/module1/</guid><description>4. Module 1 - Web Application Cleanup Delete the AWS Amplify Console application and optionally the AWS CodeCommit or GitHub repository created:
✅ Step-by-step directions
For the Amplify Console web applcation: Launch the Amplify Console console page. Select the application you launched today. From Actions in the top right corner, select Delete App Complete the application deletion process. For the CodeCommit repository: Open the AWS CodeCommit console Select the radio button next to the repository created today.</description></item><item><title>CloudWatch Logs</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/cloudwatchlogs/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/cloudwatchlogs/</guid><description>5. CloudWatch Logs Cleanup AWS Lambda automatically creates a new log group per function in Amazon CloudWatch Logs and writes logs to it when your function is invoked. You should delete the log group for the RequestUnicorn function.
✅ Step-by-step directions
From the AWS Console click Services then select CloudWatch under Management Tools. Choose Log Groups underneath Logs in the navigation menu. Select the /aws/lambda/%INITIALS%-RequestUnicorn log group. If you have many log groups in your account, you can type /aws/lambda/%INITIALS%-RequestUnicorn into the Filter text box, to easily locate the log group.</description></item><item><title>Update Config</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/updateconfig/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/updateconfig/</guid><description>5. Update the Website Config Update the /src/config.js file in your website deployment to include the invoke URL of the stage you just created. You should copy the invoke URL directly from the top of the stage editor page on the Amazon API Gateway console and paste it into the _config.api.invokeUrl key of your site&amp;rsquo;s /src/config.js file. Make sure when you update the config file it still contains the updates you made in the previous module for your Cognito user pool.</description></item><item><title>Cloud9</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/cloud9/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/cleanup/cloud9/</guid><description>6. Cloud9 Cleanup Delete the Cloud9 Development environment created today.
✅ Step-by-step directions
Launch the Cloud9 console page. Select the environment you launched today. From the top navigation, select Delete Complete the application deletion process.</description></item><item><title>Recap</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/recap/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/recap/</guid><description>⭐ Recap 🔑 Amazon API Gateway is a fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale. You can easily plug in Authorization via Amazon Cognito and backends such as AWS Lambda to create completely serverless APIs.
🔧 In this module you&amp;rsquo;ve used API Gateway to provide a REST API to the Lambda function created in the previous module. From there you&amp;rsquo;ve updated the website to use the API endpoint so that you can request rides and the information about the ride is saved in the DynamoDB table created earlier.</description></item><item><title>Recap</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/recap/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/serverlessbackend/recap/</guid><description>⭐ Recap 🔑 AWS Lambda is a serverless Functions-as-a-Service (FaaS) product that removes the burden of managing servers to run your applications. You configure a trigger and set the role that the function can use and then can interface with almost anything you want from databases, to datastores, to other services either publicly on the internet or in your own Amazon Virtual Private Cloud (VPC). Amazon DynamoDB is a non-relational serverless database that can scale automatically to handle massive amounts of traffic and data without the need to manage any servers.</description></item><item><title>Recap</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/setup/recap/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/setup/recap/</guid><description>⭐ Recap 🔑 Keep your AWS Cloud9 IDE opened in a tab
Next ✅ Proceed to the first module, Static Web Hosting, wherein you&amp;rsquo;ll deploy a static web site via AWS Amplify Console.</description></item><item><title>Recap</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/recap/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/staticwebhosting/recap/</guid><description>⭐ Recap 🔑 AWS Amplify Console makes it easy to deploy static websites with continuous integration and continuous delivery. It is capable of building more complicated JavaScript framework-based applications and shows you a preview of your application as it renders on popular mobile platforms.
🔧 In this module, you&amp;rsquo;ve created a static website which will be the base for our Wild Rydes business.
Next ✅ Proceed to the next module, User Management, where you&amp;rsquo;ll configure Amazon Cognito User Pool with the AWS Amplify CLI to manage our application&amp;rsquo;s users.</description></item><item><title>Recap</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/recap/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/usermanagement/recap/</guid><description>⭐ Recap 🔑 Amazon Cognito provides two different capabilities for managing users, federated identities and user pools. Amazon Cognito user pools handle almost any aspect about managing users, including login credentials, password resets, multifactor authentication and much more!
🔧 In this module you used user pools to create a fully-managed user management system that allows you to authenticate your users and manage their user information. You updated your website to use the user pool, and used the AWS SDKs to provide a signin form on the site.</description></item></channel></rss>