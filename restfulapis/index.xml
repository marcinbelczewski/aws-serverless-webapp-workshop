<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RESTful APIs on Wild Rydes Web Application</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/</link><description>Recent content in RESTful APIs on Wild Rydes Web Application</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.</copyright><lastBuildDate>Mon, 09 Sep 2019 17:41:51 +0100</lastBuildDate><atom:link href="https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/overview/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/overview/</guid><description>In this module you use API Gateway to expose the Lambda function you built in the previous module as a RESTful API. This API will be accessible on the public Internet. It will be secured using the Amazon Cognito user pool you created in the User Management module. Using this configuration you will then turn your statically hosted website into a dynamic web application by adding client-side JavaScript that makes AJAX calls to the exposed APIs.</description></item><item><title>REST API</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/restapi/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/restapi/</guid><description>1. Create a New REST API Use the Amazon API Gateway console to create a new API named WildRydes.
‚úÖ Step-by-step directions
Go to the Amazon API Gateway Console
On the REST API card, choose Build.
In the section Create new API select New API to clear the example API definition.
Enter %INITIALS%-WildRydes for the API Name. ‚ö†Ô∏è Remember about your initials prefix!</description></item><item><title>Cognito</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/cognito/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/cognito/</guid><description>2. Create a Cognito User Pools Authorizer Background Amazon API Gateway can use the JWT tokens returned by Cognito User Pools to authenticate API calls. In this step you&amp;rsquo;ll configure an authorizer for your API to use the user pool you created in User Management.
High-Level Instructions In the Amazon API Gateway console, create a new Cognito user pool authorizer for your API. Configure it with the details of the user pool that you created in the previous module.</description></item><item><title>API Resource</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/resource/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/resource/</guid><description>3. Create a new resource and method Create a new resource called /ride within your API. Then create a POST method for that resource and configure it to use a Lambda proxy integration backed by the RequestUnicorn function you created in the first step of this module.
‚úÖ Step-by-step directions
In the left nav, click on Resources under your WildRydes API.
From the Actions dropdown select Create Resource.</description></item><item><title>Deploy</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/deploy/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/deploy/</guid><description>4. Deploy Your API From the Amazon API Gateway console, choose Actions, Deploy API. You&amp;rsquo;ll be prompted to create a new stage. You can use prod for the stage name.
‚úÖ Step-by-step directions
In the Actions drop-down list select Deploy API. Select [New Stage] in the Deployment stage drop-down list. Enter prod for the Stage Name. Choose Deploy. Record the Invoke URL. You will use it in the next section.</description></item><item><title>Update Config</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/updateconfig/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/updateconfig/</guid><description>5. Update the Website Config Update the /src/config.js file in your website deployment to include the invoke URL of the stage you just created. You should copy the invoke URL directly from the top of the stage editor page on the Amazon API Gateway console and paste it into the _config.api.invokeUrl key of your site&amp;rsquo;s /src/config.js file. Make sure when you update the config file it still contains the updates you made in the previous module for your Cognito user pool.</description></item><item><title>Recap</title><link>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/recap/</link><pubDate>Mon, 09 Sep 2019 17:42:10 +0100</pubDate><guid>https://marcinbelczewski.github.io/aws-serverless-webapp-workshop/restfulapis/recap/</guid><description>‚≠ê Recap üîë Amazon API Gateway is a fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale. You can easily plug in Authorization via Amazon Cognito and backends such as AWS Lambda to create completely serverless APIs.
üîß In this module you&amp;rsquo;ve used API Gateway to provide a REST API to the Lambda function created in the previous module. From there you&amp;rsquo;ve updated the website to use the API endpoint so that you can request rides and the information about the ride is saved in the DynamoDB table created earlier.</description></item></channel></rss>